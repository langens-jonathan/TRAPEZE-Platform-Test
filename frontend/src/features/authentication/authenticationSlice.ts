import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { createSession as createSessionAPI, deleteSession as deleteSessionAPI, restoreSession as restoreSessionAPI } from "./authenticationAPI";
import User from "../../models/User";

export interface AuthenticationState {
  currentUser: User | null
  isLoading: boolean;
  isAuthenticated: boolean;
  errorMessage: string;
}

const initialState: AuthenticationState = {
  currentUser: null,
  isLoading: false,
  isAuthenticated: false,
  errorMessage: ""
};

export const restoreSession = createAsyncThunk<User, {}, { rejectValue: string }>(
  "authentication/restoreSession",
  async (payload: {}, { rejectWithValue }) => {
    try {
      return await restoreSessionAPI() as User;
    }
    catch(e) {
      return rejectWithValue(e?.message)
    }
  }
);

export const createSession = createAsyncThunk<User, { username: string, password: string }, { rejectValue: string }>(
  "authentication/createSession",
  async (payload: { username: string, password: string }, { rejectWithValue }) => {
    try {
      return await createSessionAPI(payload.username, payload.password) as User;
    }
    catch(e) {
      return rejectWithValue(e?.message)
    }
  }
);

export const deleteSession = createAsyncThunk<boolean, {}, { rejectValue: string }>(
  "authentication/deleteSession",
  async (payload: {}, { rejectWithValue }) => {
    try {
      return await deleteSessionAPI() as boolean;
    }
    catch(e) {
      return rejectWithValue(e?.message);
    }
  }
);

export const authenticationSlice = createSlice({
  name: "authentication",
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(restoreSession.pending, (state) => {
        state.isLoading = true;
        state.errorMessage = "";
      })
      .addCase(restoreSession.fulfilled, (state, action) => {
        state.isLoading = false;
        state.isAuthenticated = true;
        state.currentUser = action.payload;
      })
      .addCase(restoreSession.rejected, (state, action) => {
        state.isLoading = false;
        state.isAuthenticated = false;
        state.currentUser = null;
      })
      .addCase(createSession.pending, (state) => {
        state.isLoading = true;
        state.errorMessage = "";
      })
      .addCase(createSession.fulfilled, (state, action) => {
        state.isLoading = false;
        state.isAuthenticated = true;
        state.currentUser = action.payload;
      })
      .addCase(createSession.rejected, (state, action) => {
        state.isLoading = false;
        state.isAuthenticated = false;
        state.currentUser = null;
        state.errorMessage = action.payload || "An error occurred when trying to sign in.";
      })
      .addCase(deleteSession.pending, (state) => {
        state.isLoading = true;
        state.errorMessage = "";
      })
      .addCase(deleteSession.rejected, (state, action) => {
        state.isLoading = false;
        state.errorMessage = action.payload || "An error occurred when trying to sign out.";
      })
      .addCase(deleteSession.fulfilled, (state) => {
        state.isLoading = false;
        state.isAuthenticated = false;
        state.currentUser = null;
      });
  },
});

// export const {} = authenticationSlice.actions;

export default authenticationSlice.reducer;
